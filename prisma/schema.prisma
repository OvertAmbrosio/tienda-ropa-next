generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum SaleStatus {
  PENDING    // Pendiente - orden web recién creada
  PAID       // Pagada - pago confirmado
  ACCEPTED   // Aceptada - orden confirmada por admin
  SHIPPING   // En camino - enviando al cliente
  COMPLETED  // Finalizada - entregada o completada
  CANCELED   // Cancelada - orden cancelada
}

enum SaleSource {
  WEB        // Venta creada desde el checkout web
  ADMIN      // Venta creada desde el panel de administración
}

model User {
  id           Int      @id @default(autoincrement())
  email        String   @unique
  name         String?
  passwordHash String
  createdAt    DateTime @default(now())
  roles        Role[]
}

model Role {
  id    Int    @id @default(autoincrement())
  name  String @unique
  users User[]
}

model Product {
  id         Int      @id @default(autoincrement())
  name       String
  price      Float
  stock      Int      @default(0)
  imageBase64 String?
  entryDate  DateTime @default(now())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  options    ProductOption[]
  variants   ProductVariant[]
  features   ProductFeature[]
  saleItems  SaleItem[]
}

model Sale {
  id           Int        @id @default(autoincrement())
  customerName String?
  customer     Customer?  @relation(fields: [customerId], references: [id])
  customerId   Int?
  saleDate     DateTime   @default(now())
  total        Float
  status       SaleStatus @default(PENDING)
  source       SaleSource @default(ADMIN)
  trackingCode String?    @unique
  createdAt    DateTime   @default(now())
  items        SaleItem[]
  histories    SaleHistory[]
}

model SaleItem {
  id         Int     @id @default(autoincrement())
  sale       Sale    @relation(fields: [saleId], references: [id])
  saleId     Int
  product    Product @relation(fields: [productId], references: [id])
  productId  Int
  variant    ProductVariant? @relation(fields: [variantId], references: [id])
  variantId  Int?
  quantity   Int
  unitPrice  Float
  lineTotal  Float
}

model SaleHistory {
  id            Int         @id @default(autoincrement())
  sale          Sale        @relation(fields: [saleId], references: [id])
  saleId        Int
  previousStatus SaleStatus?
  newStatus     SaleStatus
  comment       String?
  performedBy   String?
  createdAt     DateTime    @default(now())

  @@index([saleId])
}

model Customer {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  email     String?
  address   String?
  phone     String?
  documentNumber String?
  createdAt DateTime @default(now())
  sales     Sale[]
}

model ProductOption {
  id        Int      @id @default(autoincrement())
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  name      String   // Ej: "Color", "Talla"
  position  Int      @default(0)

  values    ProductOptionValue[]

  @@unique([productId, name], map: "uq_option_product_name")
}

model ProductOptionValue {
  id        Int           @id @default(autoincrement())
  option    ProductOption @relation(fields: [optionId], references: [id])
  optionId  Int
  value     String        // Ej: "Azul", "M", "30"
  hexColor  String?

  variants  VariantOptionValue[]

  @@unique([optionId, value], map: "uq_option_value")
}

model ProductVariant {
  id         Int      @id @default(autoincrement())
  product    Product  @relation(fields: [productId], references: [id])
  productId  Int
  sku        String   @unique
  price      Float?
  stock      Int      @default(0)
  isActive   Boolean  @default(true)
  optionKey  String   // Ej: "Color:Azul|Talla:M" o "DEFAULT"

  values     VariantOptionValue[]
  saleItems  SaleItem[]

  @@index([productId], map: "idx_variant_product")
  @@unique([productId, optionKey], map: "uq_variant_combination")
}

model VariantOptionValue {
  variant    ProductVariant     @relation(fields: [variantId], references: [id])
  variantId  Int
  value      ProductOptionValue @relation(fields: [valueId], references: [id])
  valueId    Int

  @@id([variantId, valueId])
}

model ProductFeature {
  id        Int     @id @default(autoincrement())
  product   Product @relation(fields: [productId], references: [id])
  productId Int
  name      String  // Ej: "Tipo de tela"
  value     String  // Ej: "Algodón"
}
